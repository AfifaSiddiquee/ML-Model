# -*- coding: utf-8 -*-
"""new_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j4b53ZVTxOFjcRkrpwWT-v39tQr9ip57
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

def load_and_preprocess_data(file_path):
    """Load dataset, split into train-test sets, and apply scaling."""
    data = pd.read_csv("/content/updated_diabetes.csv")
    X = data.drop(columns=['Outcome'])
    y = data['Outcome']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    return X_train_scaled, X_test_scaled, y_train, y_test, scaler

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    return X_train_scaled, X_test_scaled, y_train, y_test, scaler

import pickle
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler


def load_and_preprocess_data(file_path):
    """Load dataset, split into train-test sets, and apply scaling."""
    data = pd.read_csv(file_path)
    X = data.drop(columns=['Outcome'])
    y = data['Outcome']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    return X_train_scaled, X_test_scaled, y_train, y_test, scaler


def train_and_save_model(file_path, model_path="diabetes_model.pkl"):
    """Train a Logistic Regression model and save it along with the scaler."""
    X_train_scaled, X_test_scaled, y_train, y_test, scaler = load_and_preprocess_data(file_path)

    model = LogisticRegression(max_iter=1000)  # Increased max_iter to ensure convergence
    model.fit(X_train_scaled, y_train)

    predictions = model.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, predictions)
    print(f"Model Accuracy: {accuracy * 100:.2f}%")

    # Save the trained model and scaler
    with open(model_path, "wb") as file:
        pickle.dump((scaler, model), file)

    return model_path, accuracy

if __name__ == "__main__":
    model_path, acc = train_and_save_model("updated_diabetes.csv")  # Use your updated CSV file path here
    print(f"Model saved at {model_path} with accuracy {acc * 100:.2f}%")

import streamlit as st
import numpy as np
import pickle

# Load model and scaler
@st.cache_resource
def load_model(model_path="diabetes_model.pkl"):
    with open(model_path, "rb") as file:
        scaler, model = pickle.load(file)
    return scaler, model

st.title("Diabetes Wellness Evaluator")

scaler, model = load_model()

# User inputs
pregnancies = st.number_input("Pregnancies", 0, 20, 1)
glucose = st.number_input("Glucose Level", 0, 200, 100)
bp = st.number_input("Blood Pressure", 0, 150, 80)
skin_thickness = st.number_input("Skin Thickness", 0, 100, 20)
insulin = st.number_input("Insulin Level", 0, 900, 100)
bmi = st.number_input("BMI", 0.0, 50.0, 25.0)
dpf = st.number_input("Diabetes Pedigree Function", 0.0, 2.5, 0.5)
age = st.number_input("Age", 0, 100, 30)

if st.button("Predict"):
    input_data = np.array([[pregnancies, glucose, bp, skin_thickness, insulin, bmi, dpf, age]])
    input_scaled = scaler.transform(input_data)
    prediction = model.predict(input_scaled)

    if prediction[0] == 1:
        st.write("Diabetic")
        st.write("Based on your results, itâ€™s recommended to consult with your doctor for further guidance.")
    else:
        st.write("Not Diabetic")
        st.write("Great news! You're not showing signs of diabetes. Keep up the healthy lifestyle!")